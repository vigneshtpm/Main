<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration Page</title>
    <link rel="stylesheet" href="assets/css/index1.css">
    <link rel="stylesheet" href="bootstrap-5.2.3-dist/css/bootstrap.min.css"> 
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
<body>
    <!--Start Header-->
    <div id="header"></div>
    <hr>
    <h5 class="text-center" style="text-decoration: underline;">
        Admission for the Year 2024-2025
    </h5>
    <!--End Header-->
    <div class="container mt-1 mb-5 pt-1">
        <div class="row">
            <div class="col-12 col-sm-10 col-md-8 col-lg-8 m-auto">
                <div class="card border-0 shadow p-3 " style="background: linear-gradient(to bottom, #ababf5, #ffffff);">
                    <div class="h3 text-center mt-1 fw-bold text-light pt-2">Applicant Registration</div>
                    <div class="card-body col-lg-8 m-auto pt-3">
                        <form id="register">
                            <div class="form-group">
                                <h5>Name of Applicant</h5>
                                <div class="input-group mb-3 custom-input-group">
                                    <input type="text" name="applicant-name" id="applicant-name" class="form-control custom-input-group" placeholder="Name of Applicant" required />
                                </div>
                            </div>
                            <div class="form-group">
                                <h5>E-mail ID</h5>
                                <div class="input-group custom-input-group mb-3">
                                    <input type="email" name="email-id" id="email-id" class="form-control custom-input-group" placeholder="Enter E-mail" required />
                                </div>
                            </div>
                            <div class="form-group">
                                <h5>Mobile No.</h5>
                                <div class="input-group custom-input-group mb-3">
                                    <input type="text" name="mobile-no" id="mobile-no" class="form-control custom-input-group" placeholder="Enter Mobile No." required />
                                </div>
                            </div>
                            <div class="form-group">
                                <h5>Password</h5>
                                <div class="input-group mt-2 mb-3 custom-input-group">
                                    <input type="password" id="password" name="password" class="form-control custom-input-group" placeholder="Enter the Password" required />
                                </div>
                                <div class="input-group mt-2 mb-3 custom-input-group">
                                    <span id="passwordError" class="error" style="color: red;"></span>
                                </div>
                            </div>
                            <div class="form-group">
                                <h5>Confirm Password</h5>
                                <div class="input-group mt-2 mb-3 custom-input-group">
                                    <input type="password" id="confirmPassword" name="confirmPassword" class="form-control custom-input-group" placeholder="Confirm Password" required />
                                </div>
                                <div class="input-group mt-2 mb-3 custom-input-group">
                                    <span id="confirmMessage" class="error" style="color: red;"></span>
                                </div>
                            </div>
                            <div id="ajaxResponse" class="mt-2"></div>
                            <div class="text-center mt-3">
                                <button type="submit" class="btn btn-center btn-outline-light btn-lg" style="--bs-btn-font-size:1.2rem; background-color: #000064; border-radius: 10px;">REGISTER</button>
                            </div>
                        </form>
                        <h1 class="text-center" style="font-size: 20px;">or</h1>
                        <div class="text-center mt-0">
                            <h6>Already registered? Click <a href="login.html">Login</a></h6>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="bootstrap-5.2.3-dist/js/bootstrap.min.js"></script>
    <script src="bootstrap-5.2.3-dist/js/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>
    <script>
        $(document).ready(function() {
            $("#header").load("header.html");


            var passwordInput = document.getElementById("password");
            var confirmPasswordInput = document.getElementById("confirmPassword");
            var passwordError = document.getElementById("passwordError");
            var confirmMessage = document.getElementById("confirmMessage");

            passwordInput.addEventListener("input", function() {
                var password = passwordInput.value;
                validatePassword(password);
            });

            confirmPasswordInput.addEventListener("input", function() {
                var password = passwordInput.value;
                var confirmPassword = confirmPasswordInput.value;
                validatePasswordMatch(password, confirmPassword);
            });

            function validatePassword(password) {
                var complexityRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
                if (password.length < 8) {
                    passwordError.innerHTML = "Password must be at least 8 characters long";
                } else if (!complexityRegex.test(password)) {
                    passwordError.innerHTML = "Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character (@$!%*?&)";
                } else {
                    passwordError.innerHTML = "";
                }
            }

            function validatePasswordMatch(password, confirmPassword) {
                if (password !== confirmPassword) {
                    confirmMessage.innerHTML = "Passwords do not match";
                } else {
                    confirmMessage.innerHTML = "";
                }
            }
        });
    </script>
    <script>
    $(document).ready(function() {
      // Handle form submission
      $("#register").on('submit',function(event) {
          // Prevent default form submission
          event.preventDefault();
          
          // Serialize form data
          var formData = $(this).serialize();
  
          // AJAX request
          $.ajax({
              type: "POST",
              url: "register.php", // Replace with your server-side script URL
              data: formData,
              success: function(response) {
                if (response.success) {
                  window.location.href = 'login.html';
                  }
                  console.log(response); // Log the response to inspect in the browser console
                  
              },

              error: function() {
                 alert('An error occurred. Please try again.');
              }

          });
      });
  });
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
    <link rel="stylesheet" href="bootstrap-5.2.3-dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="assets/css/index1.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
    <div id="header"></div>
    <hr class="thick-hr mt-0 mb-0">

    <div class="container mt-5 pt-5">
        <div class="row">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 m-auto">
                <div class="card border-0 shadow p-3 " style="background: linear-gradient(to bottom, #ababf5, #ffffff);  border-radius: 10px;">
                    <i class="fa-solid fa-user-graduate fa-5x text-center pt-5"></i>
                    <div class="h3 text-center mt-1 fw-bold text-light pt-2 ">Student Login</div>
                    <div class="card-body col-lg-8 m-auto pt-3">
                        <form id="loginForm" method="POST" >
                            <div class="form-group">
                                <div class="input-group my-4 py-2 custom-input-group">
                                    <div class="input-group-append">
                                        <div class="input-group-text">
                                            <i class="fa-solid fa-envelope" style="width: 20px; height: 25px;"></i>
                                        </div>
                                    </div>
                                    <input type="email" name="email" id="email" class="form-control custom-input-group" placeholder="Email" required />
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="input-group mt-2 custom-input-group">
                                    <div class="input-group-append">
                                        <div class="input-group-text"><i class="fa-solid fa-key" style="width: 20px; height: 25px;"></i></div>
                                    </div>
                                    <input type="password" name="passwd" id="passwd" class="form-control custom-input-group" placeholder="Password" required />
                                </div>
                            </div>

                            <a href="#" class="" style="text-decoration: none;"><h6 class="mt-3 text-end" style="color: black;"> Forget Password...</h6></a>
                            <div class="text-center mt-3">
                                <button type="submit" class="btn btn-center btn-outline-light btn-lg" style="--bs-btn-font-size:1.2rem; background-color: #000064; border-radius: 10px;">LOGIN</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://kit.fontawesome.com/7c2426f918.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        $(document).ready(function() {
            $("#header").load("header.html");
        });


        $(document).ready(function() {
            $('#loginForm').on('submit', function(e) {
                e.preventDefault();
                // Serialize form data
                var formData = $(this).serialize();
                $.ajax({
                    type: 'POST',
                    url: 'login.php',
                    data: formData,
                    success: function(response) {
                        if (response.success) {
                            window.location.href = 'Personal.html';
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function() {
                        alert('An error occurred. Please try again.');
                    }
                });
            });
        });
        
    </script>
</body>

</html>

ALTER TABLE `education` CHANGE `mon_1_1` `mon_1_1` TEXT NOT NULL;
ALTER TABLE `education` ADD `no_of_subjects_sem1` INT NOT NULL AFTER `selected_programme`, ADD `sub_1_1` VARCHAR(255) NOT NULL AFTER `no_of_subjects_sem1`, ADD `cat_1_1` INT NOT NULL AFTER `sub_1_1`, ADD `maxi_1_1` INT NOT NULL AFTER `cat_1_1`, ADD `obt_1_1` INT NOT NULL AFTER `maxi_1_1`, ADD `mon_1_1` INT NOT NULL AFTER `obt_1_1`, ADD `year_1_1` INT NOT NULL AFTER `mon_1_1`;



$(document).ready(function(){
    $("#header").load("header.html");
    $("#navigation").load("navigation.html")
});

$(document).ready(function() {
    // Get current year
    const currentYear = (new Date()).getFullYear();

    // Function to populate year dropdown
    function populateYearDropdown(yearDropdown) {
        // Clear any existing options
        yearDropdown.empty();

        // Populate year dropdown
        for (let i = currentYear - 30; i <= currentYear; i++) {
            yearDropdown.append($('<option>', {
                value: i,
                text: i
            }));
        }

        // Set default value to current year
        yearDropdown.val(currentYear);
    }

    // Call the function for each set of dropdowns
    $('.dropdown-container').each(function() {
        populateYearDropdown($(this).find('.year'));
    });
});


// Function to generate semester tables based on the selected number of semesters
function generateSemesterTables(numSemesters) {
    var storedData = {}; // Initialize stored data object

    // Clear existing tables
    $('#tables_container').empty();

    // Generate tables for each semester
    for (var i = 1; i <= numSemesters; i++) {
        generateSemesterTable(i, 1, storedData); // Generate table for each semester with default of 1 subject
    }
}

// Function to generate semester table with specified ID and number of subjects
function generateSemesterTable(semesterId, numSubjects, storedData) {
    var tableHTML = `
        <div class="table-responsive">
            <h2>Semester ${semesterId}</h2>
            <div class="form-group">
                <label for="no-of-subjects-sem${semesterId}" style="display: inline-block; margin-right: 10px;">Number of Subjects:</label>
                <select class="select2me form-control form-control no-of-subjects-select" id="no-of-subjects-sem${semesterId}" name="no-of-subjects-sem${semesterId}" data-semester-id="${semesterId}" style="display: inline-block; width:200px;">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div>
            <table class="table table-bordered" style="margin-top: 20px;">
                <thead>
                    <tr>
                        <th>Subject / Course Name</th>
                        <th>Category</th>
                        <th>Maximum Marks</th>
                        <th>Obtained Marks</th>
                        <th>Month & Year of Passing</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically added here -->
                </tbody>
            </table>
    
        </div>
        <br>
    `;

    $('#tables_container').append(tableHTML);

    // Set the selected value for number of subjects if data exists
    if (storedData && storedData[`no_of_subjects_sem${semesterId}`]) {
        $(`#no-of-subjects-sem${semesterId}`).val(storedData[`no_of_subjects_sem${semesterId}`]);
    }

    // Generate rows based on the number of subjects
    generateRows(semesterId, numSubjects, storedData);

    // Event listener for changes in the number of subjects dropdown
    $(`#no-of-subjects-sem${semesterId}`).on('change', function() {
        var numSubjects = parseInt($(this).val());
        var semesterId = $(this).data('semester-id');
        generateRows(semesterId, numSubjects, storedData);
        storeTableData(); // Store the data whenever there's a change
    });
}

// Function to generate rows within a table
function generateRows(semesterId, numSubjects, storedData) {
    var tbody = $(`#no-of-subjects-sem${semesterId}`).closest('div').next('table').find('tbody');
    tbody.empty(); // Clear existing rows

    // Generate rows based on the number of subjects
    for (var j = 1; j <= numSubjects; j++) {
        var rowData = storedData[`Row_${semesterId}_${j - 1}`] || {};
        var currentYear = new Date().getFullYear();
        var yearOptions = '';
        for (var year = currentYear; year >= currentYear - 20; year--) {
            yearOptions += `<option value="${year}" ${rowData.year === year ? 'selected' : ''}>${year}</option>`;
        }

        tbody.append(`
            <tr>
                <td><input type="text" class="form-control" name="Sub_${semesterId}_${j}"  id="Sub_${semesterId}_${j}" value="${rowData.subject || ''}" /></td>
                <td>
                    <select class="form-control" if="Cat_${semesterId}_${j}" name="Cat_${semesterId}_${j}">
                        <option value="">Select Category</option>
                        <option value="Part I" ${rowData.category === 'Part I' ? 'selected' : ''}>Part I</option>
                        <option value="Part II" ${rowData.category === 'Part II' ? 'selected' : ''}>Part II</option>
                        <option value="Part III" ${rowData.category === 'Part III' ? 'selected' : ''}>Part III</option>
                        <option value="Part IV" ${rowData.category === 'Part IV' ? 'selected' : ''}>Part IV</option>
                        <option value="Part V" ${rowData.category === 'Part V' ? 'selected' : ''}>Part V</option>
                    </select>
                </td>
                <td><input type="number" class="form-control" name="Maxi_${semesterId}_${j}" id="Maxi_${semesterId}_${j}" value="${rowData.maximumMarks || ''}" /></td>
                <td><input type="number" class="form-control" name="Obt_${semesterId}_${j}" id="Obt_${semesterId}_${j}" value="${rowData.obtainedMarks || ''}" /></td>
                <td><div class="dropdown-container">
                        <select class="select2me form-control month" id="Mon_${semesterId}_${j}"  name="Mon_${semesterId}_${j}" >
                            <option value="January" ${rowData.month === 1 ? 'selected' : ''}>January</option>
                            <option value="February" ${rowData.month === 2 ? 'selected' : ''}>February</option>
                            <option value="March" ${rowData.month === 3 ? 'selected' : ''}>March</option>
                            <option value="April" ${rowData.month === 4 ? 'selected' : ''}>April</option>
                            <option value="May" ${rowData.month === 5 ? 'selected' : ''}>May</option>
                            <option value="June" ${rowData.month === 6 ? 'selected' : ''}>June</option>
                            <option value="July" ${rowData.month === 7 ? 'selected' : ''}>July</option>
                            <option value="August" ${rowData.month === 8 ? 'selected' : ''}>August</option>
                            <option value="September" ${rowData.month === 9 ? 'selected' : ''}>September</option>
                            <option value="October" ${rowData.month === 10 ? 'selected' : ''}>October</option>
                            <option value="November" ${rowData.month === 11 ? 'selected' : ''}>November</option>
                            <option value="December" ${rowData.month === 12 ? 'selected' : ''}>December</option>
                        </select>
                        <select class="select2me form-control year" name="Year_${semesterId}_${j}" id="Year_${semesterId}_${j}"  >
                            ${yearOptions}
                        </select>
                    </div></td>
            </tr>
        `);
    }
}

// Event listener for changes in the number of semesters dropdown
$('#no-of-sem').on('change', function() {
    var numSemesters = parseInt($(this).val());
    generateSemesterTables(numSemesters);
});

// Function to store the data of each row
function storeTableData() {
    var storedData = {};

    // Loop through each semester table
    $('#tables_container').find('div').each(function() {
        var semesterId = $(this).find('.no-of-subjects-select').data('semester-id');
        storedData[`no_of_subjects_sem${semesterId}`] = $(this).find('.no-of-subjects-select').val();

        // Loop through each row in the semester table
        $(this).find('tbody tr').each(function(index) {
            var rowData = {
                subject: $(this).find('input[name^="Sub"]').val(),
                category: $(this).find('select[name^="Cat"]').val(),
                maximumMarks: $(this).find('input[name^="Maxi"]').val(),
                obtainedMarks: $(this).find('input[name^="Obt"]').val(),
                month: parseInt($(this).find('.month').val()),
                year: parseInt($(this).find('.year').val())
            };
            storedData[`Row_${semesterId}_${index}`] = rowData;
        });
    });

    // Return the stored data
    return storedData;
}

// Retrieve stored data when the page loads
$(document).ready(function() {
    var storedData = JSON.parse(localStorage.getItem('storedData')) || {}; // Retrieve stored data from local storage
    var numSemesters = parseInt($('#no-of-sem').val()); // Get the initial number of semesters
    generateSemesterTables(numSemesters); // Generate tables based on the initial number of semesters
    $('#no-of-sem').trigger('change'); // Trigger the change event to generate rows for initial semesters

    // Event listener for changes in the number of semesters dropdown
    $('#no-of-sem').on('change', function() {
        var numSemesters = parseInt($(this).val());
        generateSemesterTables(numSemesters); // Generate tables based on the selected number of semesters
        storeTableData(); // Store the data whenever there's a change in the number of semesters
    });

    // Event listener for changes in the number of subjects dropdown
    $(document).on('change', '.no-of-subjects-select', function() {
        storeTableData(); // Store the data whenever there's a change in the number of subjects
    });

    // Store the data whenever the user leaves the page
    $(window).on('beforeunload', function() {
        var storedData = storeTableData(); // Store the data
        localStorage.setItem('storedData', JSON.stringify(storedData)); // Save the data to local storage
    });
});

// Function to calculate and update the total marks and percentage
function calculateMarks() {
    var totalMaxMarks = 0;
    var totalObtMarks = 0;
    var totalMaxMarksPartIII = 0;
    var totalObtMarksPartIII = 0;
    var totalSubjectsPartIII = 0;

    // Loop through each semester table
    $('#tables_container').find('div').each(function() {
        $(this).find('tbody tr').each(function() {
            var maxMarks = parseInt($(this).find('input[name^="Maxi"]').val()) || 0;
            var obtMarks = parseInt($(this).find('input[name^="Obt"]').val()) || 0;
            var category = $(this).find('select[name^="Cat"]').val() || '';

            // Calculate total maximum and obtained marks
            totalMaxMarks += maxMarks;
            totalObtMarks += obtMarks;

            // Calculate total maximum and obtained marks for Part III
            if (category === 'Part III') {
                totalMaxMarksPartIII += maxMarks;
                totalObtMarksPartIII += obtMarks;
                totalSubjectsPartIII++;
            }
        });
    });

    // Update the input fields with the calculated values
    $('#max_mark_disp').val(totalMaxMarks);
    $('#max_mark').val(totalMaxMarks);

    $('#mark_obt_disp').val(totalObtMarks);
    $('#mark_obt').val(totalObtMarks);

    // Calculate percentage of marks for Part III
    var percMarksPartIII = (totalObtMarksPartIII / totalMaxMarksPartIII) * 100 || 0;
    $('#perc_mark_disp').val(percMarksPartIII.toFixed(3));
    $('#perc_mark').val(percMarksPartIII.toFixed(3));
}

// Call the calculateMarks function initially and whenever there's a change in the marks
$(document).ready(function() {
    calculateMarks(); // Initial calculation

    // Event listener for changes in the marks
    $('#tables_container, #no-of-sem').on('change', function() {
        calculateMarks(); // Recalculate marks whenever there's a change
    });
});


$(document).ready(function() {
    $('#education_details').on('submit', function(e) {
        e.preventDefault(); // Prevent the default form submission

        $.ajax({
            type: 'POST',
            url: 'php/education_update.php',
            data: $(this).serialize(), // Serialize the form data
            dataType: 'json', // Expect a JSON response from the server
            success: function(response) {
                if (response.success) {
                    Swal.fire({
                      toast: true,
                      position: 'top-end',
                      title: 'Personal Information',
                      text: 'You have been successfully submitted.',
                      icon: 'success',
                      timer: 3000, // Automatically close after 3 seconds
                      showConfirmButton: false, // Remove the confirm button
                      timerProgressBar: true, 
                    }).then(() => {
                      window.location.href = 'Certificate.html';
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: response.message,
                      timer: 5000, // Automatically close after 5 seconds (adjust as needed)
                      showConfirmButton: false, // Remove the confirm button
                      timerProgressBar: true, // Enable timer progress bar
                    });
                  }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.error('AJAX Error: ' + textStatus + ': ' + errorThrown); // Log error to console
                alert('An error occurred. Please try again.');
            }
        });
    });
});

$(document).ready(function() {
    // Retrieve user data on page load
    $.ajax({
        type: 'POST',
        url: 'php/education_retrieve.php',
        success: function(response) {
            if (response.success) {
                $('#sslc_ins').val(response.data.sslc_inst);
                $('#sslc_board').val(response.data.sslc_board);
                $('#sslc_sub').val(response.data.sslc_sub);
                $('#sslc_reg_no').val(response.data.sslc_reg);
                $('#sslc_perc').val(response.data.sslc_per);
                $('#sslc_month').val(response.data.sslc_month);
                $('#sslc_year').val(response.data.sslc_year);
                $('#sslc_mode').val(response.data.sslc_mode);
                $('#hsc_course').val(response.data.hsc_course);
                $('#hsc_ins').val(response.data.hsc_inst);
                $('#hsc_board').val(response.data.hsc_board);
                $('#hsc_sub').val(response.data.hsc_sub);
                $('#hsc_reg_no').val(response.data.hsc_reg);
                $('#hsc_perc').val(response.data.hsc_per);
                $('#hsc_month').val(response.data.hsc_month);
                $('#hsc_year').val(response.data.hsc_year);
                $('#hsc_mode').val(response.data.hsc_mode);
                $('#collegeName').val(response.data.college_Name);
                $('#universityName').val(response.data.university_Name);
                $('#qualification_type').val(response.data.qualification_type);
                $('#qualificationdegree').val(response.data.qualification_degree);
                $('#month_degree').val(response.data.month_degree);
                $('#year_degree').val(response.data.year_degree);
                $('#semester_type').val(response.data.semester_type);
                var numSemesters = parseInt(response.data.no_of_sem);
                $('#no-of-sem').val(numSemesters);
                generateSemesterTables(numSemesters);
                $('#awaiting_for_marksheet').val(response.data.awaiting_for_marksheet);
                var value = response.data.awaiting_for_marksheet;
                $('input[name=awaiting_for_marksheet][value=' + value + ']').prop('checked', true);
                $('#programme-applied').val(response.data.programme_applied);
                $('#select-programme').val(response.data.selected_programme);
                var value_1=parseInt(response.data.no_of_subjects_sem1);
                $('#no-of-subjects-sem1').val(value_1);
                generateRows(1, value_1, storedData); // Assuming storedData is available
        
                storeTableData(); // Store the data whenever there's a change

                $('#Sub_1_1').val(response.data.sub_1_1);
                $('#Cat_1_1').val(response.data.cat_1_1);
                $('#Maxi_1_1').val(response.data.maxi_1_1);
                $('#Obt_1_1').val(response.data.obt_1_1);
                $('#Mon_1_1').val(response.data.mon_1_1);
                $('#Year_1_1').val(response.data.year_1_1);

            } else {
                alert(response.message);
            }
        },
        error: function() {
            alert('An error occurred. Please try again.');
        }
    });
    });


    $(document).ready(function(){
    $("#header").load("header.html");
    $("#navigation").load("navigation.html")
});



$(document).ready(function() {
    // Get current year
    const currentYear = (new Date()).getFullYear();

    // Function to populate year dropdown
    function populateYearDropdown(yearDropdown) {
        // Clear any existing options
        yearDropdown.empty();

        // Populate year dropdown
        for (let i = currentYear - 30; i <= currentYear; i++) {
            yearDropdown.append($('<option>', {
                value: i,
                text: i
            }));
        }

        // Set default value to current year
        yearDropdown.val(currentYear);
    }

    // Call the function for each set of dropdowns
    $('.dropdown-container').each(function() {
        populateYearDropdown($(this).find('.year'));
    });
});


// Function to generate semester tables based on the selected number of semesters
function generateSemesterTables(numSemesters) {
    var storedData = {}; // Initialize stored data object

    // Clear existing tables
    $('#tables_container').empty();

    // Generate tables for each semester
    for (var i = 1; i <= numSemesters; i++) {
        generateSemesterTable(i, 1, storedData); // Generate table for each semester with default of 1 subject
    }
}

// Function to generate semester table with specified ID and number of subjects
function generateSemesterTable(semesterId, numSubjects, storedData) {
    var tableHTML = `
        <div class="table-responsive">
            <h2>Semester ${semesterId}</h2>
            <div class="form-group">
                <label for="no-of-subjects-sem${semesterId}" style="display: inline-block; margin-right: 10px;">Number of Subjects:</label>
                <select class="select2me form-control form-control no-of-subjects-select" id="no-of-subjects-sem${semesterId}" name="no-of-subjects-sem${semesterId}" data-semester-id="${semesterId}" style="display: inline-block; width:200px;">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div>
            <table class="table table-bordered" style="margin-top: 20px;">
                <thead>
                    <tr>
                        <th>Subject / Course Name</th>
                        <th>Category</th>
                        <th>Maximum Marks</th>
                        <th>Obtained Marks</th>
                        <th>Month & Year of Passing</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically added here -->
                </tbody>
            </table>
    
        </div>
        <br>
    `;

    $('#tables_container').append(tableHTML);

    // Set the selected value for number of subjects if data exists
    if (storedData && storedData[`no_of_subjects_sem${semesterId}`]) {
        $(`#no-of-subjects-sem${semesterId}`).val(storedData[`no_of_subjects_sem${semesterId}`]);
    }

    // Generate rows based on the number of subjects
    generateRows(semesterId, numSubjects, storedData);

    // Event listener for changes in the number of subjects dropdown
    $(`#no-of-subjects-sem${semesterId}`).on('change', function() {
        var numSubjects = parseInt($(this).val());
        var semesterId = $(this).data('semester-id');
        generateRows(semesterId, numSubjects, storedData);
        storeTableData(); // Store the data whenever there's a change
    });
}

// Function to generate rows within a table
function generateRows(semesterId, numSubjects, storedData) {
    var tbody = $(`#no-of-subjects-sem${semesterId}`).closest('div').next('table').find('tbody');
    tbody.empty(); // Clear existing rows

    // Generate rows based on the number of subjects
    for (var j = 1; j <= numSubjects; j++) {
        var rowData = storedData[`Row_${semesterId}_${j - 1}`] || {};
        var currentYear = new Date().getFullYear();
        var yearOptions = '';
        for (var year = currentYear; year >= currentYear - 20; year--) {
            yearOptions += `<option value="${year}" ${rowData.year === year ? 'selected' : ''}>${year}</option>`;
        }

        tbody.append(`
            <tr>
                <td><input type="text" class="form-control" name="Sub_${semesterId}_${j}"  id="Sub_${semesterId}_${j}" value="${rowData.subject || ''}" /></td>
                <td>
                    <select class="form-control" if="Cat_${semesterId}_${j}" name="Cat_${semesterId}_${j}">
                        <option value="">Select Category</option>
                        <option value="Part I" ${rowData.category === 'Part I' ? 'selected' : ''}>Part I</option>
                        <option value="Part II" ${rowData.category === 'Part II' ? 'selected' : ''}>Part II</option>
                        <option value="Part III" ${rowData.category === 'Part III' ? 'selected' : ''}>Part III</option>
                        <option value="Part IV" ${rowData.category === 'Part IV' ? 'selected' : ''}>Part IV</option>
                        <option value="Part V" ${rowData.category === 'Part V' ? 'selected' : ''}>Part V</option>
                    </select>
                </td>
                <td><input type="number" class="form-control" name="Maxi_${semesterId}_${j}" id="Maxi_${semesterId}_${j}" value="${rowData.maximumMarks || ''}" /></td>
                <td><input type="number" class="form-control" name="Obt_${semesterId}_${j}" id="Obt_${semesterId}_${j}" value="${rowData.obtainedMarks || ''}" /></td>
                <td><div class="dropdown-container">
                        <select class="select2me form-control month" id="Mon_${semesterId}_${j}"  name="Mon_${semesterId}_${j}" >
                            <option value="January" ${rowData.month === 1 ? 'selected' : ''}>January</option>
                            <option value="February" ${rowData.month === 2 ? 'selected' : ''}>February</option>
                            <option value="March" ${rowData.month === 3 ? 'selected' : ''}>March</option>
                            <option value="April" ${rowData.month === 4 ? 'selected' : ''}>April</option>
                            <option value="May" ${rowData.month === 5 ? 'selected' : ''}>May</option>
                            <option value="June" ${rowData.month === 6 ? 'selected' : ''}>June</option>
                            <option value="July" ${rowData.month === 7 ? 'selected' : ''}>July</option>
                            <option value="August" ${rowData.month === 8 ? 'selected' : ''}>August</option>
                            <option value="September" ${rowData.month === 9 ? 'selected' : ''}>September</option>
                            <option value="October" ${rowData.month === 10 ? 'selected' : ''}>October</option>
                            <option value="November" ${rowData.month === 11 ? 'selected' : ''}>November</option>
                            <option value="December" ${rowData.month === 12 ? 'selected' : ''}>December</option>
                        </select>
                        <select class="select2me form-control year" name="Year_${semesterId}_${j}" id="Year_${semesterId}_${j}"  >
                            ${yearOptions}
                        </select>
                    </div></td>
            </tr>
        `);
    }
}

// Event listener for changes in the number of semesters dropdown
$('#no-of-sem').on('change', function() {
    var numSemesters = parseInt($(this).val());
    generateSemesterTables(numSemesters);
});

// Function to store the data of each row
function storeTableData() {
    var storedData = {};

    // Loop through each semester table
    $('#tables_container').find('div').each(function() {
        var semesterId = $(this).find('.no-of-subjects-select').data('semester-id');
        storedData[`no_of_subjects_sem${semesterId}`] = $(this).find('.no-of-subjects-select').val();

        // Loop through each row in the semester table
        $(this).find('tbody tr').each(function(index) {
            var rowData = {
                subject: $(this).find('input[name^="Sub"]').val(),
                category: $(this).find('select[name^="Cat"]').val(),
                maximumMarks: $(this).find('input[name^="Maxi"]').val(),
                obtainedMarks: $(this).find('input[name^="Obt"]').val(),
                month: parseInt($(this).find('.month').val()),
                year: parseInt($(this).find('.year').val())
            };
            storedData[`Row_${semesterId}_${index}`] = rowData;
        });
    });

    // Return the stored data
    return storedData;
}

// Retrieve stored data when the page loads
$(document).ready(function() {
    var storedData = JSON.parse(localStorage.getItem('storedData')) || {}; // Retrieve stored data from local storage
    var numSemesters = parseInt($('#no-of-sem').val()); // Get the initial number of semesters
    generateSemesterTables(numSemesters); // Generate tables based on the initial number of semesters
    $('#no-of-sem').trigger('change'); // Trigger the change event to generate rows for initial semesters

    // Event listener for changes in the number of semesters dropdown
    $('#no-of-sem').on('change', function() {
        var numSemesters = parseInt($(this).val());
        generateSemesterTables(numSemesters); // Generate tables based on the selected number of semesters
        storeTableData(); // Store the data whenever there's a change in the number of semesters
    });

    // Event listener for changes in the number of subjects dropdown
    $(document).on('change', '.no-of-subjects-select', function() {
        storeTableData(); // Store the data whenever there's a change in the number of subjects
    });

    // Store the data whenever the user leaves the page
    $(window).on('beforeunload', function() {
        var storedData = storeTableData(); // Store the data
        localStorage.setItem('storedData', JSON.stringify(storedData)); // Save the data to local storage
    });
});

// Function to calculate and update the total marks and percentage
function calculateMarks() {
    var totalMaxMarks = 0;
    var totalObtMarks = 0;
    var totalMaxMarksPartIII = 0;
    var totalObtMarksPartIII = 0;
    var totalSubjectsPartIII = 0;

    // Loop through each semester table
    $('#tables_container').find('div').each(function() {
        $(this).find('tbody tr').each(function() {
            var maxMarks = parseInt($(this).find('input[name^="Maxi"]').val()) || 0;
            var obtMarks = parseInt($(this).find('input[name^="Obt"]').val()) || 0;
            var category = $(this).find('select[name^="Cat"]').val() || '';

            // Calculate total maximum and obtained marks
            totalMaxMarks += maxMarks;
            totalObtMarks += obtMarks;

            // Calculate total maximum and obtained marks for Part III
            if (category === 'Part III') {
                totalMaxMarksPartIII += maxMarks;
                totalObtMarksPartIII += obtMarks;
                totalSubjectsPartIII++;
            }
        });
    });

    // Update the input fields with the calculated values
    $('#max_mark_disp').val(totalMaxMarks);
    $('#max_mark').val(totalMaxMarks);

    $('#mark_obt_disp').val(totalObtMarks);
    $('#mark_obt').val(totalObtMarks);

    // Calculate percentage of marks for Part III
    var percMarksPartIII = (totalObtMarksPartIII / totalMaxMarksPartIII) * 100 || 0;
    $('#perc_mark_disp').val(percMarksPartIII.toFixed(3));
    $('#perc_mark').val(percMarksPartIII.toFixed(3));
}

// Call the calculateMarks function initially and whenever there's a change in the marks
$(document).ready(function() {
    calculateMarks(); // Initial calculation

    // Event listener for changes in the marks
    $('#tables_container, #no-of-sem').on('change', function() {
        calculateMarks(); // Recalculate marks whenever there's a change
    });
});



$(document).ready(function() {
    $('#education_details').on('submit', function(e) {
        e.preventDefault(); // Prevent the default form submission

        $.ajax({
            type: 'POST',
            url: 'php/education_update.php',
            data: $(this).serialize(), // Serialize the form data
            dataType: 'json', // Expect a JSON response from the server
            success: function(response) {
                if (response.success) {
                    Swal.fire({
                      toast: true,
                      position: 'top-end',
                      title: 'Personal Information',
                      text: 'You have been successfully submitted.',
                      icon: 'success',
                      timer: 3000, // Automatically close after 3 seconds
                      showConfirmButton: false, // Remove the confirm button
                      timerProgressBar: true, 
                    }).then(() => {
                      window.location.href = 'Certificate.html';
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: response.message,
                      timer: 5000, // Automatically close after 5 seconds (adjust as needed)
                      showConfirmButton: false, // Remove the confirm button
                      timerProgressBar: true, // Enable timer progress bar
                    });
                  }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.error('AJAX Error: ' + textStatus + ': ' + errorThrown); // Log error to console
                alert('An error occurred. Please try again.');
            }
        });
    });
});

$(document).ready(function() {
    // Retrieve user data on page load
    $.ajax({
        type: 'POST',
        url: 'php/education_retrieve.php',
        success: function(response) {
            if (response.success) {
                $('#sslc_ins').val(response.data.sslc_inst);
                $('#sslc_board').val(response.data.sslc_board);
                $('#sslc_sub').val(response.data.sslc_sub);
                $('#sslc_reg_no').val(response.data.sslc_reg);
                $('#sslc_perc').val(response.data.sslc_per);
                $('#sslc_month').val(response.data.sslc_month);
                $('#sslc_year').val(response.data.sslc_year);
                $('#sslc_mode').val(response.data.sslc_mode);
                $('#hsc_course').val(response.data.hsc_course);
                $('#hsc_ins').val(response.data.hsc_inst);
                $('#hsc_board').val(response.data.hsc_board);
                $('#hsc_sub').val(response.data.hsc_sub);
                $('#hsc_reg_no').val(response.data.hsc_reg);
                $('#hsc_perc').val(response.data.hsc_per);
                $('#hsc_month').val(response.data.hsc_month);
                $('#hsc_year').val(response.data.hsc_year);
                $('#hsc_mode').val(response.data.hsc_mode);
                $('#collegeName').val(response.data.college_Name);
                $('#universityName').val(response.data.university_Name);
                $('#qualification_type').val(response.data.qualification_type);
                $('#qualificationdegree').val(response.data.qualification_degree);
                $('#month_degree').val(response.data.month_degree);
                $('#year_degree').val(response.data.year_degree);
                $('#semester_type').val(response.data.semester_type);
                var numSemesters = parseInt(response.data.no_of_sem);
                $('#no-of-sem').val(numSemesters);
                generateSemesterTables(numSemesters);
                $('#awaiting_for_marksheet').val(response.data.awaiting_for_marksheet);
                var value = response.data.awaiting_for_marksheet;
                $('input[name=awaiting_for_marksheet][value=' + value + ']').prop('checked', true);
                $('#programme-applied').val(response.data.programme_applied);
                $('#select-programme').val(response.data.selected_programme);
                var value_1=parseInt(response.data.no_of_subjects_sem1);
                $('#no-of-subjects-sem1').val(value_1);
                

                $('#Sub_1_1').val(response.data.sub_1_1);
                $('#Cat_1_1').val(response.data.cat_1_1);
                $('#Maxi_1_1').val(response.data.maxi_1_1);
                $('#Obt_1_1').val(response.data.obt_1_1);
                $('#Mon_1_1').val(response.data.mon_1_1);
                $('#Year_1_1').val(response.data.year_1_1);

            } else {
                alert(response.message);
            }
        },
        error: function() {
            alert('An error occurred. Please try again.');
        }
    });
    });


<div class="form-group">
                <label for="no-of-subjects-sem${semesterId}" style="display: inline-block; margin-right: 10px;">Number of Subjects:</label>
                <select class="select2me form-control form-control no-of-subjects-select" id="no-of-subjects-sem${semesterId}" name="no-of-subjects-sem${semesterId}" data-semester-id="${semesterId}" style="display: inline-block; width:200px;">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div>




// Function to generate semester table with specified ID and number of subjects
function generateSemesterTable(semesterId, numSubjects, storedData) {
    var tableHTML = `
        <div class="table-responsive">
            <h2>Semester ${semesterId}</h2>
            <div class="form-group">
                <label for="no-of-subjects-sem${semesterId}" style="display: none; margin-right: 10px;">Number of Subjects:</label>
                <select class="select2me form-control form-control no-of-subjects-select" id="no-of-subjects-sem${semesterId}" name="no-of-subjects-sem${semesterId}" data-semester-id="${semesterId}" style="display: none; width:200px;">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div>
            <table class="table table-bordered" style="margin-top: 20px;">
                <thead>
                    <tr>
                        <th>Subject / Course Name</th>
                        <th>Category</th>
                        <th>Maximum Marks</th>
                        <th>Obtained Marks</th>
                        <th>Month & Year of Passing</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be dynamically added here -->
                </tbody>
            </table>
    
        </div>
        <br>
    `;

    $('#tables_container').append(tableHTML);

    // Set the selected value for number of subjects if data exists
    if (storedData && storedData[`no_of_subjects_sem${semesterId}`]) {
        $(`#no-of-subjects-sem${semesterId}`).val(storedData[`no_of_subjects_sem${semesterId}`]);
    }

    // Generate rows based on the number of subjects
    generateRows(semesterId, numSubjects, storedData);

    // Event listener for changes in the number of subjects dropdown
    $(`#no-of-subjects-sem${semesterId}`).on('change',function(){
        var numSubjects = parseInt($(this).val());
        var semesterId = $(this).data('semester-id');
        generateRows(semesterId, numSubjects, storedData);
        storeTableData(); // Store the data whenever there's a change
    });
}

// Function to generate rows within a table
function generateRows(semesterId, numSubjects, storedData) {
    var tbody = $(`#no-of-subjects-sem${semesterId}`).closest('div').next('table').find('tbody');
    tbody.empty(); // Clear existing rows
     
    // Generate rows based on the number of subjects
    for (var j = 1; j <= 10; j++) {
        var rowData = storedData[`Row_${semesterId}_${j - 1}`] || {};
        var currentYear = new Date().getFullYear();
        var yearOptions = '';
        for (var year = currentYear; year >= currentYear - 20; year--) {
            yearOptions += `<option value="${year}" ${rowData.year === year ? 'selected' : ''}>${year}</option>`;
        }

        tbody.append(`
            <tr>
                <td><input type="text" class="form-control" name="Sub_${semesterId}_${j}"  id="Sub_${semesterId}_${j}" value="${rowData.subject || ''}" /></td>
                <td>
                    <select class="form-control" id="Cat_${semesterId}_${j}" name="Cat_${semesterId}_${j}">
                        <option value="">Select Category</option>
                        <option value="Part I" ${rowData.category === 'Part I' ? 'selected' : ''}>Part I</option>
                        <option value="Part II" ${rowData.category === 'Part II' ? 'selected' : ''}>Part II</option>
                        <option value="Part III" ${rowData.category === 'Part III' ? 'selected' : ''}>Part III</option>
                        <option value="Part IV" ${rowData.category === 'Part IV' ? 'selected' : ''}>Part IV</option>
                        <option value="Part V" ${rowData.category === 'Part V' ? 'selected' : ''}>Part V</option>
                    </select>
                </td>
                <td><input type="number" class="form-control" name="Maxi_${semesterId}_${j}" id="Maxi_${semesterId}_${j}" value="${rowData.maximumMarks || ''}" /></td>
                <td><input type="number" class="form-control" name="Obt_${semesterId}_${j}" id="Obt_${semesterId}_${j}" value="${rowData.obtainedMarks || ''}" /></td>
                <td><div class="dropdown-container">
                        <select class="select2me form-control month" id="Mon_${semesterId}_${j}"  name="Mon_${semesterId}_${j}" >
                            <option value="January" ${rowData.month === 1 ? 'selected' : ''}>January</option>
                            <option value="February" ${rowData.month === 2 ? 'selected' : ''}>February</option>
                            <option value="March" ${rowData.month === 3 ? 'selected' : ''}>March</option>
                            <option value="April" ${rowData.month === 4 ? 'selected' : ''}>April</option>
                            <option value="May" ${rowData.month === 5 ? 'selected' : ''}>May</option>
                            <option value="June" ${rowData.month === 6 ? 'selected' : ''}>June</option>
                            <option value="July" ${rowData.month === 7 ? 'selected' : ''}>July</option>
                            <option value="August" ${rowData.month === 8 ? 'selected' : ''}>August</option>
                            <option value="September" ${rowData.month === 9 ? 'selected' : ''}>September</option>
                            <option value="October" ${rowData.month === 10 ? 'selected' : ''}>October</option>
                            <option value="November" ${rowData.month === 11 ? 'selected' : ''}>November</option>
                            <option value="December" ${rowData.month === 12 ? 'selected' : ''}>December</option>
                        </select>
                        <select class="select2me form-control year" name="Year_${semesterId}_${j}" id="Year_${semesterId}_${j}"  >
                            ${yearOptions}
                        </select>
                    </div></td>
            </tr>
        `);
    }
}


education.sslc_inst,
        education.sslc_board,
        education.sslc_sub, 
        education.sslc_reg, 
        education.sslc_per,
        education.sslc_month, 
        education.sslc_year, 
        education.sslc_mode,
        education.hsc_course,
        education.hsc_inst,
        education.hsc_board,
        education.hsc_sub,
        education.hsc_reg,
        education.hsc_per,
        education.hsc_month,
        education.hsc_year,
        education.hsc_mode,
        education.college_Name,
        education.university_Name,
        education.qualification_type,
        education.qualification_degree,
        education.month_degree,
        education.year_degree,
        education.semester_type,
        education.no_of_sem,
        education.awaiting_for_marksheet,
        education.programme_applied,
        education.selected_programme,
        education.no_of_subjects_sem1,
        education.sub_1_1,
        education.cat_1_1,
        education.maxi_1_1,
        education.obt_1_1,
        education.mon_1_1,
        education.year_1_1,
        education.sub_1_2,
        education.cat_1_2,
        education.maxi_1_2,
        education.obt_1_2,
        education.mon_1_2,
        education.year_1_2




        

        $sub_3_1 = $_POST["Sub_3_1"];
        $cat_3_1 = $_POST["Cat_3_1"];
        $maxi_3_1 = $_POST["Maxi_3_1"];
        $obt_3_1 = $_POST["Obt_3_1"];
        $mon_3_1 = $_POST["Mon_3_1"];
        $year_3_1 = $_POST["Year_3_1"];

        $sub_3_2 = $_POST["Sub_3_2"];
        $cat_3_2 = $_POST["Cat_3_2"];
        $maxi_3_2 = $_POST["Maxi_3_2"];
        $obt_3_2 = $_POST["Obt_3_2"];
        $mon_3_2 = $_POST["Mon_3_2"];
        $year_3_2 = $_POST["Year_3_2"];
        
        $sub_3_3 = $_POST["Sub_3_3"];
        $cat_3_3 = $_POST["Cat_3_3"];
        $maxi_3_3 = $_POST["Maxi_3_3"];
        $obt_3_3 = $_POST["Obt_3_3"];
        $mon_3_3 = $_POST["Mon_3_3"];
        $year_3_3 = $_POST["Year_3_3"];

        $sub_3_4 = $_POST["Sub_3_4"];
        $cat_3_4 = $_POST["Cat_3_4"];
        $maxi_3_4 = $_POST["Maxi_3_4"];
        $obt_3_4 = $_POST["Obt_3_4"];
        $mon_3_4 = $_POST["Mon_3_4"];
        $year_3_4 = $_POST["Year_3_4"];

        $sub_3_5 = $_POST["Sub_3_5"];
        $cat_3_5 = $_POST["Cat_3_5"];
        $maxi_3_5 = $_POST["Maxi_3_5"];
        $obt_3_5 = $_POST["Obt_3_5"];
        $mon_3_5 = $_POST["Mon_3_5"];
        $year_3_5 = $_POST["Year_3_5"];

        $sub_3_6 = $_POST["Sub_3_6"];
        $cat_3_6 = $_POST["Cat_3_6"];
        $maxi_3_6 = $_POST["Maxi_3_6"];
        $obt_3_6 = $_POST["Obt_3_6"];
        $mon_3_6 = $_POST["Mon_3_6"];
        $year_3_6 = $_POST["Year_3_6"];

     
        

        $stmt1 = $conn->prepare("UPDATE education
        SET 
        sub_3_1= ?,cat_3_1= ?,maxi_3_1= ?,obt_3_1= ?,mon_3_1=?,year_3_1= ?,
        sub_3_2= ?,cat_3_2= ?,maxi_3_2= ?,obt_3_2= ?,mon_3_2=?,year_3_2= ?,
        sub_3_3= ?,cat_3_3= ?,maxi_3_3= ?,obt_3_3= ?,mon_3_3=?,year_3_3= ?,
        sub_3_4= ?,cat_3_4= ?,maxi_3_4= ?,obt_3_4= ?,mon_3_4=?,year_3_4= ?,
        sub_3_5= ?,cat_3_5= ?,maxi_3_5= ?,obt_3_5= ?,mon_3_5=?,year_3_5= ?,
        sub_3_6= ?,cat_3_6= ?,maxi_3_6= ?,obt_3_6= ?,mon_3_6=?,year_3_6= ?
       
        WHERE id = (SELECT id FROM registration WHERE e_mail = ?);
        ");

        $stmt1->bind_param("ssssss ssssss ssssss ssssss ssssss ssssss  s", 
        $sub_3_1, $cat_3_1, $maxi_3_1, $obt_3_1, $mon_3_1, $year_3_1,
        $sub_3_2, $cat_3_2, $maxi_3_2, $obt_3_2, $mon_3_2, $year_3_2,
        $sub_3_3, $cat_3_3, $maxi_3_3, $obt_3_3, $mon_3_3, $year_3_3,
        $sub_3_4, $cat_3_4, $maxi_3_4, $obt_3_4, $mon_3_4, $year_3_4,
        $sub_3_5, $cat_3_5, $maxi_3_5, $obt_3_5, $mon_3_5, $year_3_5,
        $sub_3_6, $cat_3_6, $maxi_3_6, $obt_3_6, $mon_3_6, $year_3_6,

        $email);
        $stmt1->execute();


        $stmt1= $conn->prepare("UPDATE education
        SET sub_1_1= ?,cat_1_1= ?,maxi_1_1= ?,obt_1_1= ?,mon_1_1= ?,year_1_1= ?,
        sub_1_2= ?,cat_1_2= ?,maxi_1_2= ?,obt_1_2= ?,mon_1_2= ?,year_1_2= ?,
        sub_1_3= ?,cat_1_3= ?,maxi_1_3= ?,obt_1_3= ?,mon_1_3= ?,year_1_3= ?,
        sub_1_4= ?,cat_1_4= ?,maxi_1_4= ?,obt_1_4= ?,mon_1_4= ?,year_1_4= ?,
        sub_1_5= ?,cat_1_5= ?,maxi_1_5= ?,obt_1_5= ?,mon_1_5= ?,year_1_5= ?,
        sub_1_6= ?,cat_1_6= ?,maxi_1_6= ?,obt_1_6= ?,mon_1_6= ?,year_1_6= ?,
        sub_1_7= ?,cat_1_7= ?,maxi_1_7= ?,obt_1_7= ?,mon_1_7= ?,year_1_7= ?,
        sub_1_8= ?,cat_1_8= ?,maxi_1_8= ?,obt_1_8= ?,mon_1_8= ?,year_1_8= ?,
        sub_1_9= ?,cat_1_9= ?,maxi_1_9= ?,obt_1_9= ?,mon_1_9= ?,year_1_9= ?,
        sub_1_10= ?,cat_1_10= ?,maxi_1_10= ?,obt_1_10= ?,mon_1_10= ?,year_1_10= ?
        WHERE id = (SELECT id FROM registration WHERE e_mail = ?);
        ");

        // ssssss

        $stmt1->bind_param("sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", 
        $sub_1_1,$cat_1_1,$maxi_1_1,$obt_1_1,$mon_1_1,$year_1_1,
        $sub_1_2,$cat_1_2,$maxi_1_2,$obt_1_2,$mon_1_2,$year_1_2,
        $sub_1_3,$cat_1_3,$maxi_1_3,$obt_1_3,$mon_1_3,$year_1_3 ,
        $sub_1_4,$cat_1_4,$maxi_1_4,$obt_1_4,$mon_1_4,$year_1_4 ,
        $sub_1_5,$cat_1_5,$maxi_1_5,$obt_1_5,$mon_1_5,$year_1_5 ,
        $sub_1_6,$cat_1_6,$maxi_1_6,$obt_1_6,$mon_1_6,$year_1_6 ,
        $sub_1_7,$cat_1_7,$maxi_1_7,$obt_1_7,$mon_1_7,$year_1_7 ,
        $sub_1_8,$cat_1_8,$maxi_1_8,$obt_1_8,$mon_1_8,$year_1_8 ,
        $sub_1_9,$cat_1_9,$maxi_1_9,$obt_1_9,$mon_1_9,$year_1_9,
        $sub_1_10,$cat_1_10,$maxi_1_10,$obt_1_10,$mon_1_10,$year_1_10,
        $email);
        $stmt1->execute();


ALTER TABLE `education` CHANGE `maxi_1_4` `maxi_1_4` VARCHAR(11) NULL DEFAULT NULL;
ALTER TABLE `education` CHANGE `obt_1_4` `obt_1_4` VARCHAR(11) NULL DEFAULT NULL;
ALTER TABLE `education` CHANGE `year_1_4` `year_1_4` VARCHAR(11) NULL DEFAULT NULL;